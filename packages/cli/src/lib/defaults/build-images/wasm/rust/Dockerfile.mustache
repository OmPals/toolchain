FROM rustlang/rust:nightly-slim as base

# Install the wasm32 rust build target
RUN rustup target add wasm32-unknown-unknown

WORKDIR /build-deps

# Install curl
RUN apt-get update
RUN apt-get -y install curl

# Install wasm-opt
RUN curl -L https://github.com/WebAssembly/binaryen/releases/download/version_101/binaryen-version_101-x86_64-linux.tar.gz | tar -xz \
    && chmod +x binaryen-version_101/bin/wasm-opt \
    && cp binaryen-version_101/bin/wasm-opt /usr/local/bin/ \
    && rm -rf binary-version_101

# Install the toml-cli
RUN cargo install toml-cli

# Install wasm-snip
RUN cargo install wasm-snip

{{#polywrap_linked_packages.length}}
WORKDIR /linked-packages
{{/polywrap_linked_packages.length}}

{{#polywrap_linked_packages}}
COPY {{dir}} ./{{name}}
{{/polywrap_linked_packages}}

WORKDIR /project

# Copy all manifest files
{{#polywrap_manifests}}
COPY {{.}} .
{{/polywrap_manifests}}

# Copy all source files
{{#include}}
COPY {{.}} {{.}}
{{/include}}
{{#polywrap_module}}
COPY {{dir}} {{dir}}
{{/polywrap_module}}

{{#polywrap_linked_packages.length}}
# Link any local packages
{{#polywrap_linked_packages}}
RUN PACKAGE_NAME={{name}}; \
    {{#polywrap_module}}
    toml set ./{{dir}}/Cargo.toml dependencies.$PACKAGE_NAME.path /linked-packages/$PACKAGE_NAME > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml && \
    {{/polywrap_module}}
    true
{{/polywrap_linked_packages}}
{{/polywrap_linked_packages.length}}

# Remove any Cargo.lock files
{{#polywrap_module}}
RUN rm -rf {{dir}}/Cargo.lock

# Ensure the Wasm module is configured to use imported memory
ENV RUSTFLAGS="-C link-arg=-z -C link-arg=stack-size=65536 -C link-arg=--import-memory"

# Enable the wrap-invoke feature for the {{dir}} module
RUN toml set ./{{dir}}/Cargo.toml features.wrap-invoke [] > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml && \
    true

# Cleanup an artifact left by the toml CLI program ("[]" -> [])
RUN sed -i 's/"\[\]"/\[\]/g' ./{{dir}}/Cargo.toml

# Ensure the module at {{dir}} has the crate-type = ["cdylib"]
RUN toml set ./{{dir}}/Cargo.toml lib.crate-type ["cdylib","rlib"] > ./{{dir}}/Cargo-local.toml && \
    rm -rf ./{{dir}}/Cargo.toml && \
    mv ./{{dir}}/Cargo-local.toml ./{{dir}}/Cargo.toml && \
    true

# Clean up artifacts left by the toml CLI program ("["cdylib", "rlib"]" -> ["cdylib", "rlib"])
RUN sed -i 's/"\[cdylib,rlib\]"/\["cdylib","rlib"\]/g' ./{{dir}}/Cargo.toml

# Build the module at {{dir}}
RUN cargo +nightly build --manifest-path ./{{dir}}/Cargo.toml \
    --target wasm32-unknown-unknown --release --features "wrap-invoke"

# Make the build directory
RUN rm -rf ./build
RUN mkdir ./build

# Use wasm-opt to perform the "asyncify" post-processing step over all modules
RUN WASM_MODULE=$(ls ./{{dir}}/target/wasm32-unknown-unknown/release/*.wasm); \
    wasm-snip $WASM_MODULE -o ./build/snipped_{{name}}.wasm && \
    wasm-opt --asyncify -Os ./build/snipped_{{name}}.wasm -o ./build/{{name}}.wasm && \
    rm -rf ./build/snipped_{{name}}.wasm
{{/polywrap_module}}
