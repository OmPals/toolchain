type Query {
  callContractView(
    address: String!
    method: String!
    args: [String!]
    connection: Connection
  ): String!

  callContractStatic(
    address: String!
    method: String!
    args: [String!]
    connection: Connection
    txOverrides: TxOverrides
  ): StaticTxResult!

  encodeParams(
    types: [String!]!
    values: [String!]!
  ): String!

  encodeFunction(
    method: String!
    args: [String!]
  ): String!

  getSignerAddress(
    connection: Connection
  ): String!

  getSignerBalance(
    blockTag: BigInt
    connection: Connection
  ): BigInt!

  getSignerTransactionCount(
    blockTag: BigInt
    connection: Connection
  ): BigInt!

  getGasPrice(
    connection: Connection
  ): BigInt!

  estimateTransactionGas(
    tx: TxRequest!
    connection: Connection
  ): BigInt!

  estimateContractCallGas(
    address: String!
    method: String!
    args: [String!]
    connection: Connection
    txOverrides: TxOverrides
  ): BigInt!

  checkAddress(
    address: String!
  ): Boolean!

  toWei(
    eth: String!
  ): BigInt!

  toEth(
    wei: BigInt!
  ): String!

  awaitTransaction(
    txHash: String!
    confirmations: UInt32!
    timeout: UInt32!
    connection: Connection
  ): TxReceipt!

  waitForEvent(
    address: String!
    event: String!
    args: [String!]
    timeout: UInt32
    connection: Connection
  ): EventNotification!

  getNetwork(connection: Connection): Network!

  #Utils

  utils_hashMessage(message: String!): String!
  utils_toChecksum(address: String!, chainId: UInt8): String!
  utils_keccak(bytes: string): [UInt8]!
}

type TxReceipt {
  transactionHash: String!
  transactionIndex: UInt32!
  blockHash: String
  blockNumber: BigInt
  cumulativeGasUsed: BigInt!
  gasUsed: BigInt
  contractAddress: String
  logs: [Log!]!
  status: UInt32
  root: String
  logsBloom: String!
  transactionType: UInt32
  effectiveGasPrice: BigInt
}

type TxRequest {
  from: String
  to: String
  gas: BigInt
  gasPrice: BigInt
  value: BigInt
  data: String
  nonce: UInt32
}

type TxOverrides {
  gas: BigInt
  gasPrice: BigInt
  value: BigInt
}

type StaticTxResult {
  result: String!
  error: Boolean!
}

type Log {
  address: String!
  topics: [String!]!
  data: String!
  blockHash: String
  blockNumber: BigInt
  transactionHash: String
  transactionIndex: UInt32
  logIndex: UInt32
  transactionLogIndex: UInt32
  logType: String
  removed: Boolean
}

type EventNotification {
  data: String!
  address: String!
  log: Log!
}

type Connection {
  node: String
  networkNameOrChainId: String
}

type Network {
  name: String!
  chainId: Int!
  ensAddress: String
}
