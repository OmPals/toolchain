#import { Query, Connection, StaticTxResult } into Ethereum from "w3://ens/ethereum.web3api.eth"

type Query {
  callContractView(
    address: String!
    method: String!
    args: [String!]
    connection: Ethereum_Connection
  ): String!

 callContractStatic(
   address: String!
   method: String!
   args: [String!]
   connection: Connection
   txOverrides: TxOverrides
 ): Ethereum_StaticTxResult!

 encodeParams(
   types: [String!]!
   values: [String!]!
 ): String!

 encodeFunction(
   method: String!
   args: [String!]
 ): String!

 getSignerAddress(
   connection: Connection
 ): String!

 getSignerBalance(
   blockTag: BigInt
   connection: Connection
 ): BigInt!

 getSignerTransactionCount(
   blockTag: BigInt
   connection: Connection
 ): BigInt!

 getGasPrice(
   connection: Connection
 ): BigInt!

 estimateTransactionGas(
   tx: TxRequest!
   connection: Connection
 ): BigInt!

 estimateContractCallGas(
   address: String!
   method: String!
   args: [String!]
   connection: Connection
   txOverrides: TxOverrides
 ): BigInt!

 checkAddress(
   address: String!
 ): Boolean!

 toWei(
   eth: String!
 ): BigInt!

 toEth(
   wei: BigInt!
 ): String!

 awaitTransaction(
   txHash: String!
   confirmations: UInt32!
   timeout: UInt32!
   connection: Connection
 ): TxReceipt!

 waitForEvent(
   address: String!
   event: String!
   args: [String!]
   timeout: UInt32
   connection: Connection
 ): EventNotification!

 getNetwork(connection: Connection): Network!
}

type TxReceipt {
  transactionHash: String!
  transactionIndex: UInt32!
  blockHash: String
  blockNumber: BigInt
  cumulativeGasUsed: BigInt!
  gasUsed: BigInt
  contractAddress: String
  logs: [Log!]!
  status: UInt32
  root: String
  logsBloom: String!
  transactionType: UInt32
  effectiveGasPrice: BigInt
}

type TxRequest {
  to: String
  from: String
  nonce: UInt32
  gas: BigInt
  gasPrice: BigInt
  data: String
  value: BigInt
  chainId: UInt32
}

type TxOverrides {
  gas: BigInt
  gasPrice: BigInt
  value: BigInt
}

type StaticTxResult {
  result: String!
  error: Boolean!
}

type Log {
  address: String!
  topics: [String!]!
  data: String!
  blockHash: String
  blockNumber: BigInt
  transactionHash: String
  transactionIndex: UInt32
  logIndex: UInt32
  transactionLogIndex: UInt32
  logType: String
  removed: Boolean
}

type EventNotification {
  data: String!
  address: String!
  log: Log!
}

# type Connection {
#   node: String
#   networkNameOrChainId: String
# }

type Network {
  name: String!
  chainId: Int!
  ensAddress: String
}
