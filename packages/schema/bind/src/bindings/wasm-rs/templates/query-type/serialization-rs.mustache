use serde::{Serialize, Deserialize};
use std::convert::TryFrom;
use polywrap_wasm_rs::{
    BigInt,
    Context,
    DecodeError,
    EncodeError,
    Read,
    ReadDecoder,
    Write,
    WriteEncoder,
    JSON,
};
{{#propertyDeps.length}}

{{#propertyDeps}}
{{^isEnum}}
use {{crate}}::{{#toUpper}}{{type}}{{/toUpper}};
{{/isEnum}}
{{#isEnum}}
use crate::{
    {{#toUpper}}{{type}}{{/toUpper}},
    get_{{#toLower}}{{type}}{{/toLower}}_value,
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value
};
{{/isEnum}}
{{/propertyDeps}}
{{/propertyDeps.length}}
{{#methods}}

#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Input{{#toUpper}}{{name}}{{/toUpper}} {
    {{#arguments}}
    pub {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}},
    {{/arguments}}
}

pub fn deserialize_{{#toLower}}{{name}}{{/toLower}}_args(input: &[u8]) -> Result<Input{{#toUpper}}{{name}}{{/toUpper}}, DecodeError> {
    let mut context = Context::new();
    context.description = "Deserializing query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();

    {{#arguments.length}}
    let mut reader = ReadDecoder::new(input, context);
    let mut num_of_fields = reader.read_map_length()?;

    {{#arguments}}
    {{^object}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{^required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = None;
    {{/required}}
    {{/object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}_set = false;
    {{/required}}
    {{/arguments}}

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string()?;

        match field.as_str() {
            {{#arguments}}
            "{{name}}" => {
                reader.context().push(&field, "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "type found, reading argument");
                {{#scalar}}
                _{{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}()?;
                {{/scalar}}
                {{#array}}
                _{{#toLower}}{{name}}{{/toLower}} = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    {{> deserialize_array_nobox}}
                })?;
                {{/array}}
                {{#enum}}
                {{> deserialize_enum}}
                _{{#toLower}}{{name}}{{/toLower}} = value;
                {{/enum}}
                {{#object}}
                {{> deserialize_object_refmut}}
                _{{#toLower}}{{name}}{{/toLower}} = object;
                {{/object}}
                {{#required}}
                _{{#toLower}}{{name}}{{/toLower}}_set = true;
                {{/required}}
                reader.context().pop();
            }
            {{/arguments}}
            err => return Err(DecodeError::UnknownFieldName(err.to_string())),
        }
    }
    {{#arguments}}
    {{#required}}
    if !_{{#toLower}}{{name}}{{/toLower}}_set {
        return Err(DecodeError::MissingField("{{name}}: {{type}}.".to_string()));
    }
    {{/required}}
    {{/arguments}}
    {{/arguments.length}}

    Ok(Input{{#toUpper}}{{name}}{{/toUpper}} {
        {{#arguments}}
        {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: _{{#toLower}}{{name}}{{/toLower}},
        {{/arguments}}
    })
}

pub fn serialize_{{#toLower}}{{name}}{{/toLower}}_result(result: {{#return}}&{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}) -> Result<Vec<u8>, EncodeError> {
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) query-type: {{#toLower}}{{name}}{{/toLower}}".to_string();
    let mut encoder = WriteEncoder::new(&[], encoder_context);
    write_{{#toLower}}{{name}}{{/toLower}}_result(result, &mut encoder)?;
    Ok(encoder.get_buffer())
}

pub fn write_{{#toLower}}{{name}}{{/toLower}}_result<W: Write>(result: {{#return}}&{{#toWasm}}{{toGraphQLType}}{{/toWasm}}{{/return}}, writer: &mut W) -> Result<(), EncodeError> {
    {{#return}}
    writer.context().push("{{name}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing result");
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(result)?;
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&result, |writer, item| {
        {{> serialize_array}}
    })?;
    {{/array}}
    {{#enum}}
    {{#required}}
    writer.write_i32(&(*result as i32))?;
    {{/required}}
    {{^required}}
    writer.write_nullable_i32(&result.map(|f| f as i32))?;
    {{/required}}
    {{/enum}}
    {{#object}}
    {{#required}}
    {{#toUpper}}{{type}}{{/toUpper}}::write(&result, writer)?;
    {{/required}}
    {{^required}}
    if result.is_some() {
        {{#toUpper}}{{type}}{{/toUpper}}::write(result.as_ref().unwrap(), writer)?;
    } else {
        writer.write_nil()?;
    }
    {{/required}}
    {{/object}}
    writer.context().pop();
    {{/return}}
    Ok(())
}
{{/methods}}