{{^__commonImport}}
use std::convert::TryFrom;
use polywrap_wasm_rs::{
    BigInt,
    Context,
    DecodeError,
    EncodeError,
    Read,
    ReadDecoder,
    Write,
    WriteEncoder,
    JSON,
};
use crate::{{#toUpper}}{{type}}{{/toUpper}};
{{#propertyDeps.length}}

{{/propertyDeps.length}}{{#propertyDeps}}
{{^isEnum}}
use {{crate}}::{{#toUpper}}{{type}}{{/toUpper}};
{{/isEnum}}
{{#isEnum}}
use crate::{
    {{#toUpper}}{{type}}{{/toUpper}},
    get_{{#toLower}}{{type}}{{/toLower}}_value,
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value
};
{{/isEnum}}
{{/propertyDeps}}

pub fn serialize_{{#toLower}}{{type}}{{/toLower}}(input: &{{#toUpper}}{{type}}{{/toUpper}}) -> Result<Vec<u8>, EncodeError> {
    let mut encoder_context = Context::new();
    encoder_context.description = "Serializing (encoding) object-type: {{#toUpper}}{{type}}{{/toUpper}}".to_string();
    let mut encoder = WriteEncoder::new(&[], encoder_context);
    write_{{#toLower}}{{type}}{{/toLower}}(input, &mut encoder)?;
    Ok(encoder.get_buffer())
}

pub fn write_{{#toLower}}{{type}}{{/toLower}}<W: Write>(input: &{{#toUpper}}{{type}}{{/toUpper}}, writer: &mut W) -> Result<(), EncodeError> {
    writer.write_map_length(&{{properties.length}})?;
    {{#properties}}
    writer.context().push("{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}", "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "writing property");
    writer.write_str("{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}")?;
    {{#scalar}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}})?;
    {{/scalar}}
    {{#array}}
    writer.write_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(&input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}, |writer, item| {
        {{> serialize_array}}
    })?;
    {{/array}}
    {{#object}}
    {{#required}}
    {{#toUpper}}{{type}}{{/toUpper}}::write(&input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}, writer)?;
    {{/required}}
    {{^required}}
    if input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}.is_some() {
        {{#toUpper}}{{type}}{{/toUpper}}::write(input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}.as_ref().as_ref().unwrap(), writer)?;
    } else {
        writer.write_nil()?;
    }
    {{/required}}
    {{/object}}
    {{#enum}}
    {{#required}}
    writer.write_i32(&(input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}} as i32))?;
    {{/required}}
    {{^required}}
    writer.write_nullable_i32(&input.{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}.map(|f| f as i32))?;
    {{/required}}
    {{/enum}}
    writer.context().pop();
    {{/properties}}
    Ok(())
}

pub fn deserialize_{{#toLower}}{{type}}{{/toLower}}(input: &[u8]) -> Result<{{#toUpper}}{{type}}{{/toUpper}}, DecodeError> {
    let mut context = Context::new();
    context.description = "Deserializing object-type: {{#toUpper}}{{type}}{{/toUpper}}".to_string();
    let mut reader = ReadDecoder::new(input, context);
    read_{{#toLower}}{{type}}{{/toLower}}(&mut reader)
}

pub fn read_{{#toLower}}{{type}}{{/toLower}}<R: Read>(reader: &mut R) -> Result<{{#toUpper}}{{type}}{{/toUpper}}, DecodeError> {
    let mut num_of_fields = reader.read_map_length()?;

    {{#properties}}
    {{^object}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/object}}
    {{#object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = {{#toWasmInit}}{{toGraphQLType}}{{/toWasmInit}};
    {{/required}}
    {{^required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}} = None;
    {{/required}}
    {{/object}}
    {{#required}}
    let mut _{{#toLower}}{{name}}{{/toLower}}_set = false;
    {{/required}}
    {{/properties}}

    while num_of_fields > 0 {
        num_of_fields -= 1;
        let field = reader.read_string()?;

        match field.as_str() {
            {{#properties}}
            "{{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}" => {
                reader.context().push(&field, "{{#toWasm}}{{toGraphQLType}}{{/toWasm}}", "type found, reading property");
                {{#scalar}}
                if let Ok(v) = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}() {
                    _{{#toLower}}{{name}}{{/toLower}} = v;
                } else {
                    return Err(DecodeError::TypeReadError("{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}}.".to_string()));
                }
                {{/scalar}}
                {{#array}}
                if let Ok(v) = reader.read_{{#toLower}}{{#toMsgPack}}{{toGraphQLType}}{{/toMsgPack}}{{/toLower}}(|reader| {
                    {{> deserialize_array_nobox}}
                }) {
                    _{{#toLower}}{{name}}{{/toLower}} = v;
                } else {
                    return Err(DecodeError::TypeReadError("{{#toLower}}{{name}}{{/toLower}}: {{#toWasm}}{{toGraphQLType}}{{/toWasm}}.".to_string()));
                }
                {{/array}}
                {{#enum}}
                {{> deserialize_enum}}
                _{{#toLower}}{{name}}{{/toLower}} = value;
                {{/enum}}
                {{#object}}
                {{> deserialize_object_nobox}}
                _{{#toLower}}{{name}}{{/toLower}} = object;
                {{/object}}
                {{#required}}
                _{{#toLower}}{{name}}{{/toLower}}_set = true;
                {{/required}}
                reader.context().pop();
            }
            {{/properties}}
            err => return Err(DecodeError::UnknownFieldName(err.to_string())),
        }
    }
    {{#properties}}
    {{#required}}
    if !_{{#toLower}}{{name}}{{/toLower}}_set {
        return Err(DecodeError::MissingField("{{name}}: {{type}}.".to_string()));
    }
    {{/required}}
    {{/properties}}

    Ok({{#toUpper}}{{type}}{{/toUpper}} {
        {{#properties}}
        {{#detectKeyword}}{{#toLower}}{{name}}{{/toLower}}{{/detectKeyword}}: _{{#toLower}}{{name}}{{/toLower}},
        {{/properties}}
    })
}
{{/__commonImport}}