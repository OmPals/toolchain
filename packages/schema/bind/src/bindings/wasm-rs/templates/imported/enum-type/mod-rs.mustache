{{#__commonImport}}
pub use super::super::common::{
    get_{{#toLower}}{{type}}{{/toLower}}_key,
    get_{{#toLower}}{{type}}{{/toLower}}_value,
    sanitize_{{#toLower}}{{type}}{{/toLower}}_value,
    {{#toUpper}}{{type}}{{/toUpper}}
};
{{/__commonImport}}
{{^__commonImport}}
use polywrap_wasm_rs::EnumTypeError;
use serde::{Serialize, Deserialize};
use std::convert::TryFrom;

#[derive(Clone, Copy, Debug, Deserialize, Serialize)]
pub enum {{#toUpper}}{{type}}{{/toUpper}} {
    {{#constants}}
    {{.}},
    {{/constants}}
    _MAX_
}

pub fn sanitize_{{#toLower}}{{type}}{{/toLower}}_value(value: i32) -> Result<(), String> {
    let max_as_i32 = {{#toUpper}}{{type}}{{/toUpper}}::_MAX_ as i32;
    let valid = value >= 0 && value < max_as_i32;
    if !valid {
        return Err(String::from(EnumTypeError::EnumProcessingError(format!("Invalid value for enum '{{#toUpper}}{{type}}{{/toUpper}}': {}", value.to_string()))));
    }
    Ok(())
}

pub fn get_{{#toLower}}{{type}}{{/toLower}}_value(key: &str) -> Result<{{#toUpper}}{{type}}{{/toUpper}}, String> {
    match key {
        {{#constants}}
        "{{.}}" => Ok({{#toUpper}}{{type}}{{/toUpper}}::{{.}}),
        {{/constants}}
        "_MAX_" => Ok({{#toUpper}}{{type}}{{/toUpper}}::_MAX_),
        _ => Err(String::from(EnumTypeError::EnumProcessingError(format!("Invalid key for enum '{{#toUpper}}{{type}}{{/toUpper}}': {}", key))))
    }
}

pub fn get_{{#toLower}}{{type}}{{/toLower}}_key(value: {{#toUpper}}{{type}}{{/toUpper}}) -> Result<String, String> {
    if sanitize_{{#toLower}}{{type}}{{/toLower}}_value(value as i32).is_ok() {
        match value {
            {{#constants}}
            {{#toUpper}}{{type}}{{/toUpper}}::{{.}} => Ok("{{.}}".to_string()),
            {{/constants}}
            {{#toUpper}}{{type}}{{/toUpper}}::_MAX_ => Ok("_MAX_".to_string()),
        }
    } else {
        Err(String::from(EnumTypeError::EnumProcessingError(format!("Invalid value for enum '{{#toUpper}}{{type}}{{/toUpper}}': {}", (value  as i32).to_string()))))
    }
}

impl TryFrom<i32> for {{#toUpper}}{{type}}{{/toUpper}} {
    type Error = String;

    fn try_from(v: i32) -> Result<{{#toUpper}}{{type}}{{/toUpper}}, Self::Error> {
        match v {
            {{#constants}}
            x if x == {{#toUpper}}{{type}}{{/toUpper}}::{{.}} as i32 => Ok({{#toUpper}}{{type}}{{/toUpper}}::{{.}}),
            {{/constants}}
            x if x == {{#toUpper}}{{type}}{{/toUpper}}::_MAX_ as i32 => Ok({{#toUpper}}{{type}}{{/toUpper}}::_MAX_),
            _ => Err(String::from(EnumTypeError::ParseEnumError(format!("Error converting '{{#toUpper}}{{type}}{{/toUpper}}' to i32")))),
        }
    }
}
{{/__commonImport}}