{{^__commonImport}}
import {
  Read,
  ReadDecoder,
  Write,
  WriteSizer,
  WriteEncoder,
  Nullable,
  BigInt,
  JSON,
  Context
} from "@web3api/wasm-as";
import { {{type}} } from "./";
import * as Types from "..";

export function serialize{{type}}(type: {{type}}): ArrayBuffer {
  const sizerContext: Context = new Context("Serializing (sizing) union-type: {{type}}");
  const sizer = new WriteSizer(sizerContext);
  write{{type}}(sizer, type);
  const buffer = new ArrayBuffer(sizer.length);
  const encoderContext: Context = new Context("Serializing (encoding) union-type: {{type}}");
  const encoder = new WriteEncoder(buffer, encoderContext);
  write{{type}}(encoder, type);
  return buffer;
}

export function write{{type}}(writer: Write, type: {{type}}): void {
  {{#memberTypes}}{{^first}} else {{/first}}if(type.is{{type}}) {
    Types.{{type}}.write(writer, type.{{type}})
  }{{/memberTypes}} else {
    writer.writeNil();
  }
}

export function deserialize{{type}}(buffer: ArrayBuffer): {{type}} {
  const context: Context = new Context("Deserializing union-type {{type}}");
  const reader = new ReadDecoder(buffer, context);
  return read{{type}}(reader);
}

export function read{{type}}(reader: Read): {{type}} {
  let numFields = reader.readMapLength();

  {{#memberTypes}}
  let {{type}}: Types.{{type}} | null = null;
  {{/memberTypes}}

  let unionMemberTypes = [
    {{#memberTypes}}
    "{{type}}",
    {{/memberTypes}}
  ]

  let unionMemberType: string;

  while (numFields > 0) {
    numFields--;
    const field = reader.readString();

    if(field == "type") {
      reader.context().push(field, "String", "union member type declaration found, reading property");
      unionMemberType = reader.readString();

      if(!unionMemberTypes.includes(unionMemberType)) {
        throw new Error(`Found invalid union member type '${unionMemberType}' for union '{{type}}'. Valid member types: ${unionMemberTypes.join(", ")}`)
      }

      reader.context().pop();
    }

    if(field == "value") {
      {{#memberTypes}}
      {{^first}}else {{/first}}if (unionMemberType == "{{type}}") {
        reader.context().push(field, "Types.{{type}} | null", "value for union member type '{{type}}' found, reading property");

        if (!reader.isNextNil()) {
          {{type}} = Types.{{type}}.read(reader);
        }

        reader.context().pop();
      }
      {{/memberTypes}}
    }
  }

  {{#memberTypes}}{{^first}} else {{/first}}if({{type}}) {
    return {{union}}.create({{type}})
  }{{/memberTypes}} else {
    throw new Error(`All serialized union member types for {{type}} are null`)
  }
}
{{/__commonImport}}